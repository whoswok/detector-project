name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Code Quality Checks
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 mypy

      - name: Run Black formatter check
        run: black --check --diff .

      - name: Run Flake8 linting
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run MyPy type checking
        run: mypy . --ignore-missing-imports

  # Parser Tests
  test-parser:
    name: Parser Tests
    runs-on: ubuntu-latest
    needs: lint-and-format
    services:
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
        ports:
          - 9200:9200
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          "ES_JAVA_OPTS": "-Xms512m -Xmx512m"
        options: >-
          --health-cmd="curl -f http://localhost:9200/_cluster/health || exit 1"
          --health-interval=30s
          --health-timeout=10s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd parser
          pip install -r requirements.txt

      - name: Run parser tests
        run: |
          cd parser
          python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./parser/coverage.xml
          flags: parser
          name: parser-coverage

  # Rules Engine Tests
  test-rules-engine:
    name: Rules Engine Tests
    runs-on: ubuntu-latest
    needs: lint-and-format

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install pyyaml pytest pytest-cov

      - name: Run rules engine tests
        run: |
          cd rules/engine
          python -m pytest test_rules_engine.py -v --cov=. --cov-report=xml --cov-report=term
        continue-on-error: true  # Rules engine tests not yet implemented

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [test-parser, test-rules-engine]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build parser service
        run: |
          cd parser
          docker build -t detector-parser:test .

      - name: Build log generator (if exists)
        run: |
          if [ -f "log-generator/Dockerfile" ]; then
            cd log-generator
            docker build -t detector-log-generator:test .
          fi
        continue-on-error: true

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: docker-build
    services:
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
        ports:
          - 9200:9200
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          "ES_JAVA_OPTS": "-Xms512m -Xmx512m"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Start services
        run: |
          docker-compose up -d elasticsearch
          sleep 30  # Wait for Elasticsearch to start

      - name: Run integration tests
        run: |
          # Test parser with Elasticsearch
          cd parser
          python -c "
          from src.parser import DetectorParser
          parser = DetectorParser('localhost', 9200)
          result = parser.process_log_file('../../logs/sample-syslog.log')
          print(f'Processed {result} log entries')
          "
        continue-on-error: true

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker-build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to Staging (on main branch only)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # For example: kubectl apply, docker-compose up, etc.
          echo "Deployment completed"

  # Deploy to Production (manual trigger only)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # For example: kubectl apply -f k8s/production/, etc.
          echo "Production deployment completed"

  # Notify on completion
  notify:
    name: Notify on Completion
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Notify completion
        run: |
          echo "Pipeline completed with status: ${{ needs.deploy-staging.result || needs.deploy-production.result || 'success' }}"
